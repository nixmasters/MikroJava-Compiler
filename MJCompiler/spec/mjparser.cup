

package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
   boolean errorDetected;
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}


scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, LBRACE, RBRACE, SEMI, LPAREN, RPAREN, EQUAL, RETURN, PLUS, COMMA, PRINT, VOID, MINUS, MUL, DIV, MOD, RBRACKET, LBRACKET, NEW, READ, INC, DEC, CONST, FINDANY, DOT;
terminal Integer NUMCONST;
terminal String IDENT;
terminal Boolean BOOLCONST;
terminal Character CHARCONST;
terminal IF, ELSE;

nonterminal VarDeclLista, MethodDeclList, VarDecl;
nonterminal StatementList, Statement;
nonterminal Addop, Mulop, DesignatorStatement, VarIdent, VarIdentifierLista, ConstIdentifierLista, Declaration, DeclarationList;
nonterminal Matched, Unmatched;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodTypeName, Designator, ArrayName, ConstDecl, ConstType;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, Expr, Term, Factor, MethodRetType, ConstIdent;

Program ::= (Program) PROG ProgName:p DeclarationList:D1 LBRACE MethodDeclList RBRACE;

ProgName ::= (ProgName) IDENT:progName;

DeclarationList ::= (Declarations) DeclarationList:D1 Declaration:D2 
				|
				(NoDeclarations)  /* epsilon */
				;

Declaration ::= (ConstDeclarations) ConstDecl:C1 
			|
			(VarDeclarations) VarDecl:V1 
			;

VarDeclLista ::= (VarDeclarationList) VarDeclLista:varlista1 VarDecl:var2
			|
			(NoVarDecl) /* epsilon */
			;

VarDecl ::= (VarDeclaration) Type:varName VarIdent:varident1 VarIdentifierLista:varident2 SEMI
		|
		(VarDeclarationError) error SEMI:l
		{: parser.report_error("(Nepravilna deklaracija promenjivih)Izvrsen oporavak do ; u liniji " + lleft, null);  :}
 		;
			
VarIdentifierLista ::= (VarIdentList) VarIdentifierLista:varident1 COMMA VarIdent:varident2 
					|
					(VarIdentListError) error COMMA:l
					{: parser.report_error("(Nepravilno napisana deklaraciona lista)Izvrsen oporavak do , u liniji " + lleft, null);  :}
					|
					(NoVarIdentifiers) /* epsilon */
					;
					
VarIdent ::= (VarIdentifierDecl) IDENT:varName 
				|
				(ArrayIdentDecl) IDENT:arrayName LBRACKET RBRACKET
				|
				(VarOnlyError) error:l
		 		{: parser.report_error("(Identifikator promenjive nije po pravilima)Izvrsen oporavak u liniji " + lleft, null);  :}
				;
				
ConstDecl ::= (ConstDecl) CONST Type IDENT:constName EQUAL ConstType ConstIdentifierLista SEMI ;

ConstIdentifierLista ::= (ConstIdentList) ConstIdentifierLista:ci1 COMMA ConstIdent:ci2 
					| 
					(NoConstIdentList) /* epsilon */
					;
				
ConstIdent ::= (ConstIdentifierDecl) IDENT:constName EQUAL ConstType ;		

ConstType ::= (CharacterConst) CHARCONST:charVal 
			|
			(NumberConst) NUMCONST:numVal 
			|
			(BooleanConst) BOOLCONST:boolVal 
			;

Type ::= (Type) IDENT:typeName;

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
				|
				(NoMethodDecl) /* epsilon */
				;
				
MethodDecl ::= (MethodDecll) MethodTypeName LPAREN RPAREN VarDeclLista LBRACE StatementList RBRACE 
			|
			(MethodDeclError) error RBRACE:l
			{: parser.report_error("(Deklaracije f-ja nisu pravlno napisane)Izvrsen oporavak do } u liniji " + lleft, null);  :}
			;

MethodTypeName ::= (MethodTypeName) MethodRetType:retType IDENT:methName ;

MethodRetType ::= (ReturnType) Type:t 
				|
				(NoReturn) VOID 
				;

StatementList ::= (Statements) StatementList Statement
				|
				(NoStmt) /* epsilon */
				;
				
Statement ::= (MatchedStmt) Matched
		   |
		   (UnmatchedStmt) Unmatched
		   ; 

Unmatched ::= (UnmatchedIf) IF Expr Statement
		 	|
		 	(UnmatchedIfElse) IF Expr Matched ELSE Unmatched
		 	;
		 

Matched ::= (DesignatorStmt) DesignatorStatement:D1 SEMI
		   |
		   (ErrorStmt) error SEMI:l
		   {: parser.report_error("(Nepravilan statement)Izvrsen oporavak do ; u liniji " + lleft, null);  :}
		   |
		   (ReadStmt) READ LPAREN Designator RPAREN SEMI
		   |
		   (PrintStmt) PRINT LPAREN Expr RPAREN SEMI
		   |
		   (PrintStmtNumber) PRINT LPAREN Expr COMMA NUMCONST:numCnst RPAREN SEMI
		   |
		   (FindAnyStmt) Designator:dest EQUAL Designator:arr DOT FINDANY LPAREN Expr:opExpr RPAREN SEMI
		   |
		   (MatchedStatement) IF Expr Matched ELSE Matched
		   ;

DesignatorStatement ::= (DesignatorAssignment) Designator EQUAL Expr
					|
					(DesignatorInc) Designator INC 
					|
					(DesignatorDec) Designator DEC 
					;
			
Expr ::= (AddSubExpr) Expr Addop Term
	 |
	 (TermExpr) Term
	 |
	 (MinusStartingExpr) MINUS Term
	 ;

Term ::= (MulopTerm) Term Mulop Factor
		|
		(FactorTerm) Factor
		;
		
Factor ::= (DesigFactor) Designator
		|
		(NumFactor) NUMCONST:numCnst		
		|
		(CharFactor) CHARCONST:charCnst
		|
		(BoolFactor) BOOLCONST:boolCnst
		|
		(ConstructorFact) NEW Type LBRACKET Expr RBRACKET	
		|
		(PriorityFact) LPAREN Expr RPAREN 
		;	
		
Designator ::= (DesignatorNoArray) IDENT:desigName
			|
			(DesignatorArray) ArrayName LBRACKET Expr:exprr RBRACKET
			;

ArrayName ::= (ArrayName) IDENT:imeNiza;

Addop ::= (Plus) PLUS
		|
		(Minus) MINUS
		;
	
	
Mulop ::= (Mul) MUL
		|
		(Div) DIV
		|
		(Mod) MOD
		;




